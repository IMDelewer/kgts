from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

import pandas as pd
from fuzzywuzzy import process

router = Router()

class Answer(StatesGroup):
    waiting_message = State()

def load_excel():
    try:
        df = pd.read_excel('data/faq.xlsx', sheet_name='–õ–∏—Å—Ç1', header=None)
        if df.shape[1] < 2:
            raise ValueError("DataFrame –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞.")
        df.columns = ['A', 'B']
        return df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞ : {e}")
        return None

faq_data = load_excel()

def find_similar_text(df, search_text):
    choices = df['A'].tolist()
    best_match, score = process.extractOne(search_text, choices)

    if score > 85:
        return df[df['A'] == best_match]['B'].values[0]
    return "–ù–µ—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç."

@router.message(F.text == "‚ùì FAQ")
async def faq_message(message: Message, state: FSMContext):
    faq_intro = """*‚ùì FAQ*
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–∞—à *–≤–æ–ø—Ä–æ—Å*\.
üîç –Ø –ø–æ–∏—â—É –µ–≥–æ –≤ *–º–æ–µ–π –±–∞–∑–µ*\.
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"""
    
    await message.answer(faq_intro)
    await state.set_state(Answer.waiting_message)
    
@router.message(StateFilter(Answer.waiting_message))
async def faq_handler(message: Message, state: FSMContext):
    if faq_data is None:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return
    
    result = find_similar_text(faq_data, message.text)
    
    faq_answer = f"""‚úî –û—Ç–≤–µ—Ç
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
{result}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"""
    
    await message.answer(faq_answer, disable_web_page_preview=True, parse_mode=None)
    await state.clear()
