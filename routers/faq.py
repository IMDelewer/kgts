from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
import pandas as pd
from fuzzywuzzy import process

def load_excel():
    df = pd.read_excel('data/faq.xlsx', sheet_name='–õ–∏—Å—Ç1', header=None)
    return df

def find_similar_text(df, search_text):
    if df.shape[1] < 2:
        raise ValueError("DataFrame –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞.")

    df.columns = ['A', 'B']

    choices = df['A'].tolist()
    best_match, score = process.extractOne(search_text, choices)

    if score > 85:
        matching_row = df[df['A'] == best_match]
        return matching_row['B'].values[0]
    else:
        return "–ù–µ—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"
    

router = Router()

class Answer(StatesGroup):
    waiting_message = State()

    
@router.message(F.text == "‚ùì FAQ")
async def faq_message(message: Message, state: FSMContext):
    faq = """‚ùì FAQ
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å ‚ùì.
–Ø –ø–æ–∏—â—É –µ–≥–æ –≤ –º–æ–µ–π –±–∞–∑–µ üîç.
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
"""
    await message.answer(faq)
    await state.set_state(Answer.waiting_message)
    
@router.message(StateFilter(Answer.waiting_message))
async def faq_handler(message: Message, state: FSMContext):
    
    df = load_excel()
    result = find_similar_text(df, message.text)
    
    faq_answer = f"""‚úî –û—Ç–≤–µ—Ç
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
{result}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
"""
    
    await message.answer(faq_answer, disable_web_page_preview=True)
    
    await state.clear()