from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
    
from keyboards import support_inline

from database import Database

from asyncio import sleep
router = Router()

database = Database(current_collection='supports')

class Wait(StatesGroup):
    waiting_message = State()
    waiting_message_support = State()

@router.message(F.text == "üéß –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_wait(message: Message, state: FSMContext):
    warn = """‚ùó –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–µ,
–ø–æ–ø—Ä–æ–±—É—Ç–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ ‚ùì FAQ.
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
"""
    await message.answer(warn)
    await sleep(5)
    support = """üéß –ü–æ–¥–¥–µ—Ä–∂–∫–∞
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å ‚ùì.
–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –í–∞–º üéß.
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
"""
    await message.answer(support)
    await state.set_state(Wait.waiting_message)

#–∞ –∫—Ç–æ —Ç—É—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–ª–∏–≤–∞–µ—Ç?
@router.message(StateFilter(Wait.waiting_message))
async def support_handler(message: Message, state: FSMContext, bot: Bot):
    config = bot.config
    
    if message.from_user.id not in config.admins:
        support = """üéß –ü–æ–¥–¥–µ—Ä–∂–∫–∞
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–£–ø—Å. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
–ù–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—å—Å—è
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
"""
        await state.clear()
        await message.answer(support)
    else:
        support = bot.support(
            collection = 'supports',
            request = message.text,
            userid = message.from_user.id,
            operid = 0,
            rate = 0,
            cancels = 0,
            cancel_ids = [],
            status = "opened",
            support_name = None
        )
        await support.insert()
        
        for operator in config.supports:
            await bot.send_message(
                    chat_id=operator,
                    text=f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: '{message.text}'",
                    reply_markup=support_inline(operator)
                )

@router.callback_query()
async def support_accept_reject_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = callback.data.split("|")
    action, user_id = data[0], int(data[1])
    db = bot.db
    
    support = db.find_one("supports", {"userid": user_id})
    if not support:
        await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    if action == "reject":
        if support["operid"] == 0:
            if support["cancels"] < 4:
                if callback.from_user.id not in support["cancel_ids"]:
                    db.update("supports", {"userid": user_id}, {"$inc": {"cancels": 1}, "$push": {"cancel_ids": callback.from_user.id}})
                    await callback.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
                else:
                    await callback.answer("–ü–æ—Ö–æ–∂–µ, –≤—ã —É–∂–µ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å.")
            else:
                await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å.")
        else:
            await callback.answer("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏.")
    
    elif action == "accept":
        if support["operid"] == 0:
            db.update("supports", {"userid": user_id}, {"$set": {"operid": callback.from_user.id, "status": "accepted"}})
            await bot.send_message(chat_id=support["userid"], text="–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø—Ä–∏–Ω—è—Ç!")
            await callback.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.")
            await state.set_state(Wait.waiting_message_support)
        else:
            await callback.answer("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏.")

@router.message(StateFilter(Wait.waiting_message_support))
async def support_answer_handler(message: Message, state: FSMContext, bot: Bot):
    # Save the support answer
    # Note: You should implement a way to relate this answer to the specific support request.
    await message.answer("–í–∞—à –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω.")
    await state.clear()
